/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MedicalTestService } from "../medicalTest.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MedicalTestCreateInput } from "./MedicalTestCreateInput";
import { MedicalTest } from "./MedicalTest";
import { MedicalTestFindManyArgs } from "./MedicalTestFindManyArgs";
import { MedicalTestWhereUniqueInput } from "./MedicalTestWhereUniqueInput";
import { MedicalTestUpdateInput } from "./MedicalTestUpdateInput";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { TransactionWhereUniqueInput } from "../../transaction/base/TransactionWhereUniqueInput";
import { MedicalTestDto } from "../MedicalTestDto";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MedicalTestControllerBase {
  constructor(
    protected readonly service: MedicalTestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MedicalTest })
  @nestAccessControl.UseRoles({
    resource: "MedicalTest",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMedicalTest(
    @common.Body() data: MedicalTestCreateInput
  ): Promise<MedicalTest> {
    return await this.service.createMedicalTest({
      data: {
        ...data,

        doctor: data.doctor
          ? {
              connect: data.doctor,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        date: true,

        doctor: {
          select: {
            id: true,
          },
        },

        id: true,
        results: true,
        testName: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [MedicalTest] })
  @ApiNestedQuery(MedicalTestFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MedicalTest",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async medicalTests(@common.Req() request: Request): Promise<MedicalTest[]> {
    const args = plainToClass(MedicalTestFindManyArgs, request.query);
    return this.service.medicalTests({
      ...args,
      select: {
        createdAt: true,
        date: true,

        doctor: {
          select: {
            id: true,
          },
        },

        id: true,
        results: true,
        testName: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MedicalTest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MedicalTest",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async medicalTest(
    @common.Param() params: MedicalTestWhereUniqueInput
  ): Promise<MedicalTest | null> {
    const result = await this.service.medicalTest({
      where: params,
      select: {
        createdAt: true,
        date: true,

        doctor: {
          select: {
            id: true,
          },
        },

        id: true,
        results: true,
        testName: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MedicalTest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MedicalTest",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMedicalTest(
    @common.Param() params: MedicalTestWhereUniqueInput,
    @common.Body() data: MedicalTestUpdateInput
  ): Promise<MedicalTest | null> {
    try {
      return await this.service.updateMedicalTest({
        where: params,
        data: {
          ...data,

          doctor: data.doctor
            ? {
                connect: data.doctor,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          date: true,

          doctor: {
            select: {
              id: true,
            },
          },

          id: true,
          results: true,
          testName: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MedicalTest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MedicalTest",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMedicalTest(
    @common.Param() params: MedicalTestWhereUniqueInput
  ): Promise<MedicalTest | null> {
    try {
      return await this.service.deleteMedicalTest({
        where: params,
        select: {
          createdAt: true,
          date: true,

          doctor: {
            select: {
              id: true,
            },
          },

          id: true,
          results: true,
          testName: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/transactions")
  @ApiNestedQuery(TransactionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "read",
    possession: "any",
  })
  async findTransactions(
    @common.Req() request: Request,
    @common.Param() params: MedicalTestWhereUniqueInput
  ): Promise<Transaction[]> {
    const query = plainToClass(TransactionFindManyArgs, request.query);
    const results = await this.service.findTransactions(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        date: true,

        doctor: {
          select: {
            id: true,
          },
        },

        id: true,

        medicalTest: {
          select: {
            id: true,
          },
        },

        transactionType: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/transactions")
  @nestAccessControl.UseRoles({
    resource: "MedicalTest",
    action: "update",
    possession: "any",
  })
  async connectTransactions(
    @common.Param() params: MedicalTestWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        connect: body,
      },
    };
    await this.service.updateMedicalTest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/transactions")
  @nestAccessControl.UseRoles({
    resource: "MedicalTest",
    action: "update",
    possession: "any",
  })
  async updateTransactions(
    @common.Param() params: MedicalTestWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        set: body,
      },
    };
    await this.service.updateMedicalTest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/transactions")
  @nestAccessControl.UseRoles({
    resource: "MedicalTest",
    action: "update",
    possession: "any",
  })
  async disconnectTransactions(
    @common.Param() params: MedicalTestWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        disconnect: body,
      },
    };
    await this.service.updateMedicalTest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/medical-tests/:id")
  @swagger.ApiOkResponse({
    type: MedicalTestDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetMedicalTestById(
    @common.Body()
    body: string
  ): Promise<MedicalTestDto> {
    return this.service.GetMedicalTestById(body);
  }

  @common.Get("/medical-tests")
  @swagger.ApiOkResponse({
    type: MedicalTestDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ListMedicalTests(
    @common.Body()
    body: MedicalTestDto[]
  ): Promise<MedicalTestDto[]> {
    return this.service.ListMedicalTests(body);
  }
}
