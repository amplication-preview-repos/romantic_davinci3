/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MedicalTest as PrismaMedicalTest,
  Transaction as PrismaTransaction,
  Doctor as PrismaDoctor,
  User as PrismaUser,
} from "@prisma/client";

import { MedicalTestDto } from "../MedicalTestDto";

export class MedicalTestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MedicalTestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.medicalTest.count(args);
  }

  async medicalTests(
    args: Prisma.MedicalTestFindManyArgs
  ): Promise<PrismaMedicalTest[]> {
    return this.prisma.medicalTest.findMany(args);
  }
  async medicalTest(
    args: Prisma.MedicalTestFindUniqueArgs
  ): Promise<PrismaMedicalTest | null> {
    return this.prisma.medicalTest.findUnique(args);
  }
  async createMedicalTest(
    args: Prisma.MedicalTestCreateArgs
  ): Promise<PrismaMedicalTest> {
    return this.prisma.medicalTest.create(args);
  }
  async updateMedicalTest(
    args: Prisma.MedicalTestUpdateArgs
  ): Promise<PrismaMedicalTest> {
    return this.prisma.medicalTest.update(args);
  }
  async deleteMedicalTest(
    args: Prisma.MedicalTestDeleteArgs
  ): Promise<PrismaMedicalTest> {
    return this.prisma.medicalTest.delete(args);
  }

  async findTransactions(
    parentId: string,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.medicalTest
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }

  async getDoctor(parentId: string): Promise<PrismaDoctor | null> {
    return this.prisma.medicalTest
      .findUnique({
        where: { id: parentId },
      })
      .doctor();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.medicalTest
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
  async GetMedicalTestById(args: string): Promise<MedicalTestDto> {
    throw new Error("Not implemented");
  }
  async ListMedicalTests(args: MedicalTestDto[]): Promise<MedicalTestDto[]> {
    throw new Error("Not implemented");
  }
}
