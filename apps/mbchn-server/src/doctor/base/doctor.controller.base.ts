/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { DoctorService } from "../doctor.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DoctorCreateInput } from "./DoctorCreateInput";
import { Doctor } from "./Doctor";
import { DoctorFindManyArgs } from "./DoctorFindManyArgs";
import { DoctorWhereUniqueInput } from "./DoctorWhereUniqueInput";
import { DoctorUpdateInput } from "./DoctorUpdateInput";
import { MedicalHistoryFindManyArgs } from "../../medicalHistory/base/MedicalHistoryFindManyArgs";
import { MedicalHistory } from "../../medicalHistory/base/MedicalHistory";
import { MedicalHistoryWhereUniqueInput } from "../../medicalHistory/base/MedicalHistoryWhereUniqueInput";
import { MedicalTestFindManyArgs } from "../../medicalTest/base/MedicalTestFindManyArgs";
import { MedicalTest } from "../../medicalTest/base/MedicalTest";
import { MedicalTestWhereUniqueInput } from "../../medicalTest/base/MedicalTestWhereUniqueInput";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { TransactionWhereUniqueInput } from "../../transaction/base/TransactionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class DoctorControllerBase {
  constructor(
    protected readonly service: DoctorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Doctor })
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createDoctor(@common.Body() data: DoctorCreateInput): Promise<Doctor> {
    return await this.service.createDoctor({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        specialty: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Doctor] })
  @ApiNestedQuery(DoctorFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async doctors(@common.Req() request: Request): Promise<Doctor[]> {
    const args = plainToClass(DoctorFindManyArgs, request.query);
    return this.service.doctors({
      ...args,
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        specialty: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Doctor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async doctor(
    @common.Param() params: DoctorWhereUniqueInput
  ): Promise<Doctor | null> {
    const result = await this.service.doctor({
      where: params,
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        specialty: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Doctor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateDoctor(
    @common.Param() params: DoctorWhereUniqueInput,
    @common.Body() data: DoctorUpdateInput
  ): Promise<Doctor | null> {
    try {
      return await this.service.updateDoctor({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          firstName: true,
          id: true,
          lastName: true,
          specialty: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Doctor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteDoctor(
    @common.Param() params: DoctorWhereUniqueInput
  ): Promise<Doctor | null> {
    try {
      return await this.service.deleteDoctor({
        where: params,
        select: {
          createdAt: true,
          firstName: true,
          id: true,
          lastName: true,
          specialty: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/medicalHistories")
  @ApiNestedQuery(MedicalHistoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MedicalHistory",
    action: "read",
    possession: "any",
  })
  async findMedicalHistories(
    @common.Req() request: Request,
    @common.Param() params: DoctorWhereUniqueInput
  ): Promise<MedicalHistory[]> {
    const query = plainToClass(MedicalHistoryFindManyArgs, request.query);
    const results = await this.service.findMedicalHistories(params.id, {
      ...query,
      select: {
        createdAt: true,
        date: true,
        description: true,
        diagnosis: true,

        doctor: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/medicalHistories")
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "update",
    possession: "any",
  })
  async connectMedicalHistories(
    @common.Param() params: DoctorWhereUniqueInput,
    @common.Body() body: MedicalHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      medicalHistories: {
        connect: body,
      },
    };
    await this.service.updateDoctor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/medicalHistories")
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "update",
    possession: "any",
  })
  async updateMedicalHistories(
    @common.Param() params: DoctorWhereUniqueInput,
    @common.Body() body: MedicalHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      medicalHistories: {
        set: body,
      },
    };
    await this.service.updateDoctor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/medicalHistories")
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "update",
    possession: "any",
  })
  async disconnectMedicalHistories(
    @common.Param() params: DoctorWhereUniqueInput,
    @common.Body() body: MedicalHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      medicalHistories: {
        disconnect: body,
      },
    };
    await this.service.updateDoctor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/medicalTests")
  @ApiNestedQuery(MedicalTestFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MedicalTest",
    action: "read",
    possession: "any",
  })
  async findMedicalTests(
    @common.Req() request: Request,
    @common.Param() params: DoctorWhereUniqueInput
  ): Promise<MedicalTest[]> {
    const query = plainToClass(MedicalTestFindManyArgs, request.query);
    const results = await this.service.findMedicalTests(params.id, {
      ...query,
      select: {
        createdAt: true,
        date: true,

        doctor: {
          select: {
            id: true,
          },
        },

        id: true,
        results: true,
        testName: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/medicalTests")
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "update",
    possession: "any",
  })
  async connectMedicalTests(
    @common.Param() params: DoctorWhereUniqueInput,
    @common.Body() body: MedicalTestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      medicalTests: {
        connect: body,
      },
    };
    await this.service.updateDoctor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/medicalTests")
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "update",
    possession: "any",
  })
  async updateMedicalTests(
    @common.Param() params: DoctorWhereUniqueInput,
    @common.Body() body: MedicalTestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      medicalTests: {
        set: body,
      },
    };
    await this.service.updateDoctor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/medicalTests")
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "update",
    possession: "any",
  })
  async disconnectMedicalTests(
    @common.Param() params: DoctorWhereUniqueInput,
    @common.Body() body: MedicalTestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      medicalTests: {
        disconnect: body,
      },
    };
    await this.service.updateDoctor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/transactions")
  @ApiNestedQuery(TransactionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "read",
    possession: "any",
  })
  async findTransactions(
    @common.Req() request: Request,
    @common.Param() params: DoctorWhereUniqueInput
  ): Promise<Transaction[]> {
    const query = plainToClass(TransactionFindManyArgs, request.query);
    const results = await this.service.findTransactions(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        date: true,

        doctor: {
          select: {
            id: true,
          },
        },

        id: true,

        medicalTest: {
          select: {
            id: true,
          },
        },

        transactionType: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/transactions")
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "update",
    possession: "any",
  })
  async connectTransactions(
    @common.Param() params: DoctorWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        connect: body,
      },
    };
    await this.service.updateDoctor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/transactions")
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "update",
    possession: "any",
  })
  async updateTransactions(
    @common.Param() params: DoctorWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        set: body,
      },
    };
    await this.service.updateDoctor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/transactions")
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "update",
    possession: "any",
  })
  async disconnectTransactions(
    @common.Param() params: DoctorWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        disconnect: body,
      },
    };
    await this.service.updateDoctor({
      where: params,
      data,
      select: { id: true },
    });
  }
}
